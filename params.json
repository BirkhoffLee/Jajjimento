{"name":"ジャッジメント","tagline":"風紀委員 - PHP 表單驗證類別。","body":"# Jajjimento\r\n\r\nJajjimento（ジャッジメント）中文涵意是風紀委員，這是用來驗證表單的 PHP 類別，\r\n\r\n用法簡單，你甚至可以先儲存設定，假若要重複使用該規則，只需要幾條指令。\r\n\r\n和以往的版本不同，這次比較偏向物件導向方式。\r\n\r\n&nbsp;\r\n\r\n## 特色\r\n\r\n1. 可以儲存規則供未來重複使用。\r\n\r\n2. 簡單明瞭。\r\n\r\n3. 可以檢查陣列，或是直接檢查變數。\r\n\r\n4. 更具有意義的函式名稱卻又簡短。 \r\n\r\n5. 支援艾拉。\r\n\r\n&nbsp;\r\n\r\n## 索引\r\n\r\n1. [舉例](#舉例)\r\n\r\n2. [設置來源 或 採用預先規則](#設置來源-或-採用預先規則)\r\n\r\n  * [來源模式](#來源模式)\r\n  * [手動模式](#手動模式)\r\n  * [採用預先規則](#採用預先規則)\r\n\r\n3. [設置種類](#設置種類)\r\n\r\n  * [`min()` 和 `max()` 的用法](#min-和-max-的用法)\r\n  * [`dateFormat()` 的用法](#dateformat-的用法)\r\n  * [`inside()` 的用法](#inside-的用法)\r\n  * [`urlNot()` 的用法](#urlnot-的用法)\r\n  * [`target()` 的用法](#target-的用法)\r\n\r\n4. [設置附加功能](#設置附加功能)\r\n\r\n  * [`required()` 或 `req()` 的用法](#required-或-req-的用法)\r\n  * [`format()` 的用法](#format-的用法)\r\n  * [`trim()` 的用法](#trim-的用法)\r\n\r\n5. [驗證](#驗證)\r\n\r\n6. [取得驗證後的資料](#取得驗證後的資料)\r\n\r\n7. [儲存成預先規則](#儲存成預先規則)\r\n\r\n8. [當「艾拉」存在的時候](#當艾拉存在的時候)\r\n\r\n&nbsp;\r\n\r\n## 舉例\r\n\r\n這次的舉例，採用的是多數的情況，你可能會想檢查你接收的 $_POST 表單，你就應該這樣做：\r\n\r\n```php\r\n/** 設定要檢查的來源為 $_POST 陣列 */\r\n$jaji->source($_POST)\r\n\r\n     /** 稍後會提及如何設定規則 */\r\n     ->add('username')->type('length')->min(3)->max(16)->required()\r\n     \r\n     /** 你也可以用簡寫 */\r\n     ->add('username')->length(3, 16)->req()\r\n\r\n     /** 一旦設定都好了，接下來就該檢查了！ */\r\n     ->check();\r\n```\r\n\r\n&nbsp;\r\n\r\n## 設置來源 或 採用預先規則\r\n\r\n在風紀委員中，你有兩種方式可以選擇，讀取預先規則或採用來源模式。\r\n\r\n而來源模式分成下列兩種：\r\n\r\n* 來源 － 可以是 `$_POST` 或 `$_GET`，甚至是一個*陣列*。\r\n* 手動 － 當你的來源不固定，或者來源是一個變數而非陣列，就應該採用手動。\r\n\r\n&nbsp;\r\n\r\n#### 來源模式\r\n\r\n若你要檢查一個陣列中的資料，你就應該用 `source()` 啟用來源模式。\r\n\r\n在這裡以檢查一個 $_POST 表單為例：\r\n\r\n```php\r\n$jaji->source($_POST)\r\n     ->add('欄位名稱')   // 假設欄位名稱是 username，那麼你就會檢查 $_POST['username']。\r\n```\r\n\r\n&nbsp;\r\n\r\n#### 手動模式\r\n\r\n今天如果你並沒有陣列要檢查，而是想直接檢查一個變數，則是 `manual()`。\r\n\r\n```php\r\n$jaji->manual()\r\n     ->add($Test)   // 在這個情況，$Test 會直接成為來源，該變數的內容會被檢查。\r\n```\r\n\r\n&nbsp;\r\n\r\n#### 採用預先規則\r\n\r\n你可以利用 `loadCheck()` 直接套用一個你先前儲存的規則並直接檢查，稍後會提及如何儲存一個規則。\r\n\r\n```php\r\n$jaji->source($_POST)\r\n     ->loadCheck($Rule)   // 接下來會套用 $Rule 內所含有的規則並檢查。\r\n```\r\n\r\n&nbsp;\r\n\r\n## 設置種類\r\n\r\n透過 `type()` 來設定一個規則要檢查的種類，如果你嫌這種用法太長，**我們稍後會提及縮寫**，下列是目前可用的種類:\r\n\r\n| 種類英文   |   簡短    |        相關函式      |                                    種類說明                                |\r\n| ---------- | --------- | -------------------- | -------------------------------------------------------------------------- |\r\n| length     | 長度      |  `min()`, `max()`    | 字串長度；字串必須短於 `max()`，也至少長於 `min()` 所設定的值。            |\r\n| range      | 範圍      |  `min()`, `max()`    | 數字範圍；數字必須小於 `max()`，也至少大於 `min()` 所設定的值。            |\r\n| date       | 日期      |  `dateFormat()`      | 日期格式；日期必須是 `dateFormat()` 所設定的格式，例如 `YYYY-MM-DD`。      |\r\n| in         | 清單      |  `inside()`          | 是否存在；這個值必須在 `inside()` 所設定的陣列內。                         |\r\n| email      | 電郵      |                      | 電子信箱；內容必須是符合電子信箱格式。                                     |\r\n| gender     | 性別      |                      | 性別種類；性別必須是 f(emale) 或 m(ale) 或 o(ther)。                       |\r\n| ip         | IP        |                      | IP 地址 ；值必須符合 IPv4 或是 IPv6 的格式。                               |\r\n| ipv4       | IPv4      |                      | IP 地址 ；值必須符合 IPv4 格式。                                           |\r\n| ipv6       | IPv6      |                      | IP 地址 ；值必須符合 IPv6 格式。                                           |\r\n| url        | 網址      |  `urlNot()`          | 網址    ；內容必須是符合一般網址格式，用 `urlNot()` 來新增不允許網址開頭。 |\r\n| equals     | 等於      |  `target()`          | 相同內容；內容必須與 `target()` 的內容相同。                               |\r\n\r\n&nbsp;\r\n\r\n##### `min()` 和 `max()` 的用法\r\n\r\n長度或數字必須大於 `min()` ，且小於或短於 `max()` 所設定的值。\r\n\r\n```php\r\n->add('username')->type('length')->min(3)->max(6)\r\n```\r\n\r\n&nbsp;\r\n\r\n##### `dateFormat()` 的用法\r\n\r\n`dateFormat()` 用來設定什麼日期格式可以被接受，\r\n\r\n可以是單一個格式，或是一整個陣列，日期格式為 [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601)，\r\n\r\n簡單說就是你在 PHP 中常見的「YYYY-mm-dd」或「dd/mm/YYYY」之類。\r\n\r\n```php\r\n->add('username')->type('date')->dateFormat('YYYY-mm-dd')\r\n\r\n/** 或是 */\r\n->add('birthday')->type('date')->dateFormat(['YYYY-mm-dd', 'mm/dd/YYYY'])\r\n```\r\n\r\n&nbsp;\r\n\r\n##### `inside()` 的用法\r\n\r\n必須在 `inside()` 所指定陣列中找的到這個值。\r\n\r\n```php\r\n->add('options')->type('in')->inside(['A', 'B', 'C', 'D'])\r\n```\r\n\r\n&nbsp;\r\n\r\n##### `urlNot()` 的用法\r\n\r\n網址不可以是以什麼開頭的，例如 `http` 或 `https`，設定可以是單一個，或是陣列。\r\n\r\n```php\r\n->add('url')->type('url')->urlNot('ftp')\r\n\r\n/** 或是 */\r\n->add('url')->type('url')->urlNot(['http', 'https'])\r\n\r\n/** 你也可以 */\r\n->add('url')->type('url')->urlNot(['http://www.google.com/', 'http://www.yahoo.com/'])\r\n```\r\n\r\n&nbsp;\r\n\r\n##### `target()` 的用法\r\n\r\n必須在 `target()` 中的內容一樣。需要注意的是：\r\n\r\n**無論是來源或是手動模式中，`target()` 帶入的是欄位名稱，而不是變數。**\r\n\r\n**但是如果你帶入一個變數，則將第二個參數設為 False 。**\r\n\r\n```php\r\n->add('passwordConfirm')->type('equals')->target('password')\r\n\r\n/** 倘若你要帶入一個變數，將後面設為 False */\r\n->add('passwordConfirm')->type('equals')->target($OriginalPassword, false)\r\n```\r\n\r\n&nbsp;\r\n\r\n### 設置種類的簡寫\r\n\r\n在你使用簡寫的時候，可能會發現有些函式與 PHP 內建的重複，但這是不會發生問題的。\r\n\r\n| 種類英文   |   簡短    |            簡寫            | \r\n| ---------- | --------- | -------------------------- | \r\n| length     | 長度      |  `length(min, max)`        |\r\n| range      | 範圍      |  `range(min, max)`         |\r\n| date       | 日期      |  `date()`                  |\r\n| in         | 清單      |  `inside(list)`            |\r\n| email      | 電郵      |  `email()`                 | \r\n| gender     | 性別      |  `gender()`                | \r\n| ip         | IP        |  `ip()`                    | \r\n| ipv4       | IPv4      |  `ipv4()`                  |\r\n| ipv6       | IPv6      |  `ipv6()`                  | \r\n| url        | 網址      |  `url(urlNot)`             |\r\n| equals     | 相同      |  `equals(target, isField)` |\r\n\r\n&nbsp;\r\n\r\n當你使用簡寫，`type()` 是不必要的。\r\n\r\n```php\r\n->add('username')->length(3, 12)\r\n\r\n->add('age')->range(1, 99)\r\n\r\n->add('url')->url()\r\n\r\n->add('passwordConfirm')->equals($Password, false)\r\n```\r\n\r\n&nbsp;\r\n\r\n## 設置附加功能\r\n\r\n附加功能例如「必填項目」，或者是限制內容的格式，例如:「a-Z0-9」，\r\n\r\n有的附加功能支援縮寫，而所有的的附加功能都可以用在縮寫的種類上。\r\n\r\n|     函式     |      簡短     |   簡寫    | \r\n| ------------ | ------------- | --------- | \r\n| `required()` | 必填          |  `req()`  |\r\n| `format()`   | 格式          |           |\r\n| `trim()`     | 清除字尾空白  |           |     \r\n\r\n&nbsp;\r\n\r\n##### `required()` 或 `req()` 的用法\r\n\r\n這會讓某個欄位成為必填項目，如果**內容只有空白**，或是**完全沒內容**，就會無法通過，\r\n \r\n兩者都是相同的東西，僅是一個縮寫而已。\r\n\r\n&nbsp;\r\n\r\n```php\r\n/** 可以用在縮寫種類上 */\r\n->add('age')->range(1, 99)->req()\r\n\r\n/** 如果你想要讓他完整一點也可以 */\r\n->add('url')->type('url')->required()\r\n```\r\n\r\n&nbsp;\r\n\r\n##### `format()` 的用法\r\n\r\n這會限制內容必須是什麼格式，這個的用法為 [正規表達式](https://en.wikipedia.org/wiki/Regular_expression)。\r\n\r\n```php\r\n->add('username')->length(1, 12)->format('a-Z0-9')\r\n```\r\n\r\n&nbsp;\r\n\r\n##### `trim()` 的用法\r\n\r\n移除字尾最後的空白。\r\n\r\n```php\r\n->add('address')->length(7, 60)->trim()\r\n```\r\n\r\n&nbsp;\r\n\r\n## 驗證\r\n\r\n一旦你完成了先前的設置，就可以透過 `check()` 或 `loadCheck()` 來進行驗證手續。\r\n\r\n```php\r\n$jaji->check();\r\n\r\n/** 如果你要讀取設定並驗證的話則是這樣 */\r\n$jaji->loadCheck($myRule);\r\n```\r\n\r\n&nbsp;\r\n\r\n## 取得驗證後的資料\r\n\r\n驗證後的資料可能會比較安全一點_（我是說，你網站最終被駭入，還是不應該找我，對吧。）_\r\n\r\n你可以透過 `done()` 來取得一個被驗證後的資料。\r\n\r\n**請注意：如果前一個驗證是錯誤的，那麼可能會取得不完整的資料，**\r\n\r\n**最好的方法是在前一個驗證錯誤的時候就中止繼續。**\r\n\r\n```php\r\n/** 先驗證 */\r\n$jaji->check();\r\n\r\n/** 然後把這個拿來做後續資料處理 */\r\n$jaji->done();\r\n```\r\n\r\n&nbsp;\r\n\r\n## 儲存成預先規則\r\n\r\n一旦你完成了設置，你可以選擇不要檢查（也就是不要驗證），而是使用下列方式儲存在一個變數中。\r\n\r\n**如果你決定要儲存成規則，那麼就請不要指定來源（`source()` 或 `manual()`），因為那是無用的。**\r\n\r\n```php\r\n$myRule = $jaji->save()\r\n```\r\n\r\n&nbsp;\r\n\r\n如果你不是很清楚，我們從頭來過，最後採用儲存的方式。\r\n\r\n```php\r\n$myRule = $jaji->add('username')->type('length')->min(3)->max(32)->required()->format('a-Z0-9')\r\n               ->add('age')     ->type('range') ->min(7)->max(99)->required()\r\n               ->add('ip')      ->type('ip');\r\n               ->save();\r\n```\r\n\r\n&nbsp;\r\n\r\n接著 `$myRule` 內就會有一串你剛所儲存的規則，若要使用，請在下次這樣使用：\r\n\r\n```php\r\n$jaji->source($_POST)\r\n     ->loadCheck($myRule);\r\n```\r\n\r\n如此一來，就會以剛才的規則去檢查 $_POST。\r\n\r\n&nbsp;\r\n\r\n## 當「艾拉」存在的時候\r\n\r\n如果你有 [艾拉](http://github.com/TeaMeow/Aira) 來協助你處理錯誤，\r\n\r\n那麼你應該將此這為 True（預設為 False。）。\r\n\r\n```php\r\n$jaji->hasAira = true;\r\n```\r\n\r\n接下來， `aira::add('INCORRECT_FORM')` 將會在驗證失敗時被呼叫。\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}